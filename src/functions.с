int max(int a, int b) {
    return (a > b) ? a : b;
}

// Возвращает время в миллисекундах между start и end
double elapsed_ms(struct timespec start, struct timespec end) {
    return (end.tv_sec - start.tv_sec) * 1000.0 + 
           (end.tv_nsec - start.tv_nsec) / 1000000.0;
}

typedef struct {
    double x, y, z;
} Point;

typedef struct {
    Point A, B, C;
} Triangle;

typedef struct {
    Point* points;      // Массив точек с координатами (x, y, z)
    int count_points;   // Кол-во всего точек
    int start_i;        // Начальный индекс части массива для потока 
    int end_i;          // Конечный индекс массива для потока
    double thread_max_area;    // локальный максимум
} Thread_data;

 /*
pthread_create() всегда вызывает функцию, которая выглядит так:
void* thread_function(void* arg);
*/ 

double triangle_area(Point A, Point B, Point C) {
    // Векторы AB и AC
    double ABx = B.x - A.x;
    double ABy = B.y - A.y;
    double ABz = B.z - A.z;

    double ACx = C.x - A.x;
    double ACy = C.y - A.y;
    double ACz = C.z - A.z;

    // Векторное произведение AB × AC
    double cross_x = ABy * ACz - ABz * ACy;
    double cross_y = ABz * ACx - ABx * ACz;
    double cross_z = ABx * ACy - ABy * ACx;

    // Длина этого вектора
    double cross_len = sqrt(cross_x * cross_x + cross_y * cross_y + cross_z * cross_z);

    return 0.5 * cross_len; // площадь
}